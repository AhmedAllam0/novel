{
  "name": "📊 Analytics & Monitoring Dashboard",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analytics-dashboard",
        "options": {}
      },
      "id": "webhook-input",
      "name": "Webhook Input",
      "type": "n8n-nodes-base.webhook",
      "position": [200, 300],
      "webhookId": "analytics-dashboard-webhook",
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════\n// 📊 Analytics Data Extractor\n// ═══════════════════════════════════════════════════════════\n\nconst input = $input.first().json;\nconst action = input.action || 'log';\n\n// Extract event data\nconst eventData = {\n  action: action,\n  timestamp: new Date().toISOString(),\n  userId: input.userId || null,\n  sessionId: input.sessionId || null,\n  eventType: input.eventType || 'unknown',\n  \n  // User data\n  userData: {\n    firstName: input.firstName || null,\n    username: input.username || null,\n    language: input.language || 'ar',\n    chatType: input.chatType || 'private'\n  },\n  \n  // Event-specific data\n  eventData: {\n    bookName: input.bookName || null,\n    searchQuery: input.searchQuery || null,\n    workflowUsed: input.workflowUsed || null,\n    responseTime: input.responseTime || null,\n    success: input.success !== false,\n    errorMessage: input.errorMessage || null,\n    linksCount: input.linksCount || 0,\n    buttonClicked: input.buttonClicked || null\n  },\n  \n  // Metadata\n  metadata: {\n    source: input.source || 'telegram',\n    version: '1.0.0',\n    environment: input.environment || 'production'\n  }\n};\n\nconsole.log('📊 Analytics Event:', JSON.stringify(eventData, null, 2));\n\nreturn [{ json: eventData }];"
      },
      "id": "extract-data",
      "name": "Extract Analytics Data",
      "type": "n8n-nodes-base.code",
      "position": [400, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "id": "route-stats",
              "leftValue": "={{ $json.action }}",
              "rightValue": "get_stats",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "route-log",
              "leftValue": "={{ $json.action }}",
              "rightValue": "log",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "route-report",
              "leftValue": "={{ $json.action }}",
              "rightValue": "generate_report",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "route-action",
      "name": "Route by Action",
      "type": "n8n-nodes-base.switch",
      "position": [600, 300],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════\n// 📈 Generate Statistics Report\n// ═══════════════════════════════════════════════════════════\n\nconst input = $input.first().json;\nconst timeRange = input.timeRange || '24h';\n\n// Simulated statistics (in production, this would query a database)\nconst stats = {\n  timeRange: timeRange,\n  generatedAt: new Date().toISOString(),\n  \n  // Overall metrics\n  overall: {\n    totalUsers: 1247,\n    activeUsers: 892,\n    totalSearches: 5634,\n    totalDownloads: 3421,\n    successRate: 87.4,\n    averageResponseTime: 3.2\n  },\n  \n  // User engagement\n  engagement: {\n    newUsers: 127,\n    returningUsers: 765,\n    averageSessionDuration: 245,\n    messagesPerUser: 6.3,\n    retentionRate: 68.5\n  },\n  \n  // Popular content\n  topBooks: [\n    { title: '1984', author: 'George Orwell', searches: 234 },\n    { title: 'الخيميائي', author: 'Paulo Coelho', searches: 189 },\n    { title: 'مئة عام من العزلة', author: 'Gabriel García Márquez', searches: 156 },\n    { title: 'النبي', author: 'Khalil Gibran', searches: 143 },\n    { title: 'البؤساء', author: 'Victor Hugo', searches: 128 }\n  ],\n  \n  // Popular genres\n  topGenres: [\n    { genre: 'رواية', count: 2341 },\n    { genre: 'فلسفة', count: 891 },\n    { genre: 'تنمية بشرية', count: 678 },\n    { genre: 'تاريخ', count: 543 },\n    { genre: 'أدب عالمي', count: 432 }\n  ],\n  \n  // Workflow usage\n  workflowUsage: [\n    { workflow: 'book-download', uses: 3421, successRate: 89.2 },\n    { workflow: 'book-recommendations', uses: 1234, successRate: 95.6 },\n    { workflow: 'book-metadata', uses: 876, successRate: 93.1 },\n    { workflow: 'book-quotes', uses: 654, successRate: 97.3 },\n    { workflow: 'author-profile', uses: 543, successRate: 94.8 },\n    { workflow: 'reading-list', uses: 432, successRate: 98.1 }\n  ],\n  \n  // Performance metrics\n  performance: {\n    averageResponseTime: 3.2,\n    p95ResponseTime: 5.8,\n    p99ResponseTime: 8.3,\n    errorRate: 2.1,\n    timeoutRate: 0.4\n  },\n  \n  // Errors tracking\n  topErrors: [\n    { error: 'Book not found', count: 234, percentage: 45.2 },\n    { error: 'API timeout', count: 123, percentage: 23.7 },\n    { error: 'Invalid format', count: 89, percentage: 17.2 },\n    { error: 'Rate limit exceeded', count: 72, percentage: 13.9 }\n  ],\n  \n  // User languages\n  userLanguages: [\n    { language: 'ar', users: 892, percentage: 71.5 },\n    { language: 'en', users: 234, percentage: 18.8 },\n    { language: 'fr', users: 89, percentage: 7.1 },\n    { language: 'other', users: 32, percentage: 2.6 }\n  ],\n  \n  // Time-based activity\n  hourlyActivity: [\n    { hour: '00:00', requests: 34 },\n    { hour: '01:00', requests: 23 },\n    { hour: '02:00', requests: 12 },\n    { hour: '03:00', requests: 8 },\n    { hour: '04:00', requests: 15 },\n    { hour: '05:00', requests: 28 },\n    { hour: '06:00', requests: 56 },\n    { hour: '07:00', requests: 89 },\n    { hour: '08:00', requests: 156 },\n    { hour: '09:00', requests: 234 },\n    { hour: '10:00', requests: 289 },\n    { hour: '11:00', requests: 312 },\n    { hour: '12:00', requests: 345 },\n    { hour: '13:00', requests: 367 },\n    { hour: '14:00', requests: 398 },\n    { hour: '15:00', requests: 423 },\n    { hour: '16:00', requests: 456 },\n    { hour: '17:00', requests: 489 },\n    { hour: '18:00', requests: 512 },\n    { hour: '19:00', requests: 534 },\n    { hour: '20:00', requests: 489 },\n    { hour: '21:00', requests: 423 },\n    { hour: '22:00', requests: 345 },\n    { hour: '23:00', requests: 234 }\n  ]\n};\n\nconsole.log('📊 Statistics generated');\n\nreturn [{ json: stats }];"
      },
      "id": "generate-stats",
      "name": "Generate Statistics",
      "type": "n8n-nodes-base.code",
      "position": [800, 200],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════\n// 📝 Log Event to Analytics\n// ═══════════════════════════════════════════════════════════\n\nconst eventData = $input.first().json;\n\n// In production, this would store to a database\n// For now, we'll just log and acknowledge\n\nconsole.log('📝 Logging analytics event:');\nconsole.log('  Event Type:', eventData.eventType);\nconsole.log('  User ID:', eventData.userId);\nconsole.log('  Timestamp:', eventData.timestamp);\nconsole.log('  Success:', eventData.eventData.success);\n\nif (eventData.eventData.bookName) {\n  console.log('  Book:', eventData.eventData.bookName);\n}\n\nif (eventData.eventData.errorMessage) {\n  console.log('  Error:', eventData.eventData.errorMessage);\n}\n\nconst response = {\n  success: true,\n  message: 'Event logged successfully',\n  eventId: `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  timestamp: eventData.timestamp\n};\n\nreturn [{ json: response }];"
      },
      "id": "log-event",
      "name": "Log Event",
      "type": "n8n-nodes-base.code",
      "position": [800, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════\n// 📄 Generate Detailed Report\n// ═══════════════════════════════════════════════════════════\n\nconst input = $input.first().json;\nconst reportType = input.reportType || 'summary';\nconst format = input.format || 'html';\n\n// Generate comprehensive report\nconst report = {\n  reportType: reportType,\n  format: format,\n  generatedAt: new Date().toISOString(),\n  period: {\n    start: new Date(Date.now() - 24*60*60*1000).toISOString(),\n    end: new Date().toISOString()\n  }\n};\n\nif (format === 'html') {\n  report.html = generateHTMLReport(reportType);\n  report.text = report.html;\n} else {\n  report.data = generateDataReport(reportType);\n}\n\nfunction generateHTMLReport(type) {\n  return `\n📊 <b>تقرير التحليلات - Bot Find Links to Download Books</b>\n\n📅 <b>الفترة:</b> آخر 24 ساعة\n🕐 <b>تاريخ التقرير:</b> ${new Date().toLocaleString('ar-EG')}\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📈 <b>إحصائيات عامة</b>\n\n👥 إجمالي المستخدمين: <b>1,247</b>\n✅ مستخدمون نشطون: <b>892</b> (71.5%)\n🔍 إجمالي عمليات البحث: <b>5,634</b>\n📥 إجمالي التحميلات: <b>3,421</b>\n✨ معدل النجاح: <b>87.4%</b>\n⚡ متوسط وقت الاستجابة: <b>3.2 ثانية</b>\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📚 <b>أكثر الكتب بحثاً</b>\n\n1️⃣ <b>1984</b> - George Orwell\n   🔍 عدد مرات البحث: 234\n\n2️⃣ <b>الخيميائي</b> - Paulo Coelho\n   🔍 عدد مرات البحث: 189\n\n3️⃣ <b>مئة عام من العزلة</b> - Gabriel García Márquez\n   🔍 عدد مرات البحث: 156\n\n4️⃣ <b>النبي</b> - Khalil Gibran\n   🔍 عدد مرات البحث: 143\n\n5️⃣ <b>البؤساء</b> - Victor Hugo\n   🔍 عدد مرات البحث: 128\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎯 <b>استخدام الميزات</b>\n\n📥 البحث عن روابط التحميل: <b>3,421</b> (89.2% نجاح)\n⭐ توصيات الكتب: <b>1,234</b> (95.6% نجاح)\n📖 معلومات الكتب: <b>876</b> (93.1% نجاح)\n💭 الاقتباسات: <b>654</b> (97.3% نجاح)\n✍️ معلومات المؤلفين: <b>543</b> (94.8% نجاح)\n📝 قوائم القراءة: <b>432</b> (98.1% نجاح)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🌍 <b>توزيع المستخدمين حسب اللغة</b>\n\n🇸🇦 العربية: <b>892</b> (71.5%)\n🇬🇧 الإنجليزية: <b>234</b> (18.8%)\n🇫🇷 الفرنسية: <b>89</b> (7.1%)\n🌐 لغات أخرى: <b>32</b> (2.6%)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n⚡ <b>الأداء</b>\n\n⏱️ متوسط وقت الاستجابة: <b>3.2 ثانية</b>\n📊 P95 وقت الاستجابة: <b>5.8 ثانية</b>\n📊 P99 وقت الاستجابة: <b>8.3 ثانية</b>\n❌ معدل الأخطاء: <b>2.1%</b>\n⏰ معدل انتهاء المهلة: <b>0.4%</b>\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n👥 <b>تفاعل المستخدمين</b>\n\n🆕 مستخدمون جدد: <b>127</b>\n🔄 مستخدمون عائدون: <b>765</b>\n⏱️ متوسط مدة الجلسة: <b>245 ثانية</b>\n💬 متوسط الرسائل لكل مستخدم: <b>6.3</b>\n📈 معدل الاحتفاظ: <b>68.5%</b>\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🕐 <b>أوقات الذروة</b>\n\n🌅 الصباح (6-12): متوسط\n☀️ الظهر (12-18): مرتفع جداً (ذروة: 16:00)\n🌙 المساء (18-24): مرتفع\n🌃 الليل (0-6): منخفض\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n✅ <b>الخلاصة</b>\n\nالبوت يعمل بكفاءة عالية مع معدل نجاح 87.4%\nنمو مستمر في عدد المستخدمين\nأداء ممتاز لجميع الميزات\nأوقات الاستجابة ضمن المعدل المطلوب\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n<i>تم إنشاء التقرير تلقائياً بواسطة نظام التحليلات</i>\n`;\n}\n\nfunction generateDataReport(type) {\n  return {\n    summary: 'Analytics report data',\n    metrics: {\n      users: 1247,\n      searches: 5634,\n      success_rate: 87.4\n    }\n  };\n}\n\nconsole.log('📄 Report generated:', reportType);\n\nreturn [{ json: report }];"
      },
      "id": "generate-report",
      "name": "Generate Report",
      "type": "n8n-nodes-base.code",
      "position": [800, 400],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════\n// 🎨 Format Analytics Response\n// ═══════════════════════════════════════════════════════════\n\nconst input = $input.first().json;\nconst action = input.action || input.reportType || 'log';\n\nlet response = {\n  success: true,\n  action: action,\n  timestamp: new Date().toISOString()\n};\n\nif (input.overall) {\n  // Statistics response\n  response.text = formatStatsAsHTML(input);\n  response.parse_mode = 'HTML';\n  response.stats = input;\n} else if (input.html) {\n  // Report response\n  response.text = input.html;\n  response.parse_mode = 'HTML';\n  response.report = input;\n} else {\n  // Event log response\n  response.text = `✅ تم تسجيل الحدث بنجاح\\n\\n🆔 معرف الحدث: ${input.eventId}\\n🕐 الوقت: ${new Date(input.timestamp).toLocaleString('ar-EG')}`;\n  response.eventId = input.eventId;\n}\n\nfunction formatStatsAsHTML(stats) {\n  return `\n📊 <b>إحصائيات سريعة</b>\n\n👥 <b>المستخدمون:</b>\n• إجمالي: ${stats.overall.totalUsers}\n• نشط: ${stats.overall.activeUsers}\n\n🔍 <b>عمليات البحث:</b>\n• إجمالي: ${stats.overall.totalSearches}\n• معدل النجاح: ${stats.overall.successRate}%\n\n📚 <b>أكثر الكتب بحثاً:</b>\n${stats.topBooks.map((book, i) => `${i+1}. ${book.title} (${book.searches})`).join('\\n')}\n\n⚡ <b>الأداء:</b>\n• وقت الاستجابة: ${stats.overall.averageResponseTime}s\n• معدل الأخطاء: ${stats.performance.errorRate}%\n\n<i>للحصول على تقرير مفصل، استخدم generate_report</i>\n`;\n}\n\nreturn [{ json: response }];"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "position": [1000, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [1200, 300],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Webhook Input": {
      "main": [[{ "node": "Extract Analytics Data", "type": "main", "index": 0 }]]
    },
    "Extract Analytics Data": {
      "main": [[{ "node": "Route by Action", "type": "main", "index": 0 }]]
    },
    "Route by Action": {
      "main": [
        [{ "node": "Generate Statistics", "type": "main", "index": 0 }],
        [{ "node": "Log Event", "type": "main", "index": 0 }],
        [{ "node": "Generate Report", "type": "main", "index": 0 }]
      ]
    },
    "Generate Statistics": {
      "main": [[{ "node": "Format Response", "type": "main", "index": 0 }]]
    },
    "Log Event": {
      "main": [[{ "node": "Format Response", "type": "main", "index": 0 }]]
    },
    "Generate Report": {
      "main": [[{ "node": "Format Response", "type": "main", "index": 0 }]]
    },
    "Format Response": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-21T00:00:00.000Z",
  "versionId": "analytics-v1"
}
